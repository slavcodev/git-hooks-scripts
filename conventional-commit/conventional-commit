#!/bin/sh
# =============================================================================
# BSD 2-Clause License
#
# Copyright (c) 2019, Veaceslav Medvedev
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#  list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#  this list of conditions and the following disclaimer in the documentation
#  and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
# OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# =============================================================================

FCR='\033[1;31m' # Red
FCG='\033[1;32m' # Green
FCY='\033[0;33m' # Yellow
FCS='\033[0;37m' # Light gray (silver)
NC='\033[0m'

CMD="conventional-commit"
VERSION="1.0.0"
HOME="https://github.com/slavcodev/git-hooks-scripts"
ABOUT="${FCG}Conventional commit title${NC} version ${FCY}$VERSION${NC}"

OPTION_EXCLUDE_BRANCH="excluded-branch"
OPTION_PREFIX_PATTERN="prefix-pattern"
OPTION_SUFFIX_PATTERN="suffix-pattern"
OPTION_MAX_LENGTH="max-length"
OPTION_EXCLUDE_BRANCH_DEFAULT="master"
OPTION_MAX_LENGTH_DEFAULT=80

HELP="$ABOUT

Git 'commit-msg' hook that looks for patterns the branch name
and uses the matches as prefix or suffix of every commit title.

This is useful if you have convention to use issue number in the branch,
and want to add it automatically to the commit title.
For example, you have branch like 'FOO-9999-add-hook', on adding the commit 'Add Hook,
the hook may add suffix 'Add Hook (FOO-9999)' or prefix '[FOO-9999] Add Hook'.

Note: you can use 'commit --no-verify' to skip 'commit-msg' hooks.

${FCY}Example of config:${NC}
${FCS}~~~
[${CMD}]
  ${OPTION_EXCLUDE_BRANCH} = master
  ${OPTION_EXCLUDE_BRANCH} = development
  ${OPTION_PREFIX_PATTERN} = "FOO-[0-9]+"
  ${OPTION_SUFFIX_PATTERN} = "FOO-[0-9]+"
  ${OPTION_MAX_LENGTH} = ${OPTION_MAX_LENGTH_DEFAULT}
~~~${NC}

$HOME

> Enjoy coding ❤️"

report_start() {
  echo "${FCG}$@${NC}"
}

report_error() {
  echo "${FCR}$@${NC}"
}

report_done() {
  [[ $# > 0 ]] && echo "${FCG}✓ $@${NC}" || echo "${FCG}✓ Done${NC}"
}

read_config() {
  option="$1"
  default="$2"

  value="$(git config --get ${CMD}.${option})"

  if [[ -z ${value} ]] ; then
    echo ${default}
  else
    echo ${value}
  fi
}

read_all_configs() {
  option="$1"
  default="$2"

  value="$(git config --get-all ${CMD}.${option})"

  if [[ -z ${value} ]] ; then
    echo ${default}
  else
    echo ${value}
  fi
}

write_commit_title() {
  commit_file="${1}"
  commit_title="${2}"
  mutated_commit_title="${3}"

  if [[ -f "${commit_file}" ]] ; then
    sed -i -e 's/'"${commit_title}"'/'"${mutated_commit_title}"'/g' "${commit_file}"
  fi
}

read_commit_title() {
  if [[ -f "${1}" ]] ; then
    echo "$(head -n 1 "${1}")"
  else
    echo "${1}"
  fi
}

main() {
  report_start "Preparing conventional prefix or suffix for the commit..."

  commit_file="${1}"
  commit_title="$(read_commit_title ${commit_file})"

  if [[ -z "${commit_title}" ]]; then
    return
  fi

  prefix_pattern="$(read_config ${OPTION_PREFIX_PATTERN})"
  suffix_pattern="$(read_config ${OPTION_SUFFIX_PATTERN})"
  max_length="$(read_config ${OPTION_MAX_LENGTH} ${OPTION_MAX_LENGTH_DEFAULT})"

  if [[ -z ${prefix_pattern} && -z ${suffix_pattern} ]]; then
    return
  fi

  excluded_branches="$(read_all_configs ${OPTION_EXCLUDE_BRANCH} ${OPTION_EXCLUDE_BRANCH_DEFAULT})"

  branch_name=$(git rev-parse --abbrev-ref HEAD)

  for excluded_branch in ${excluded_branches} ; do
    if [[ "${branch_name}" =~ "${excluded_branch}" ]]; then
      return
    fi
  done

  mutated_commit_title=${commit_title}

  if [[ -n "${prefix_pattern}" ]]; then
    prefix=$(echo "${branch_name}" | grep -Eo "${prefix_pattern}")
    prefix_exists=$(echo "${commit_title}" | grep -o "^\[${prefix}\] ")
    # commit_title=${commit_title#*]}  # remove prefix ending in "]"

    if [[ -z "${prefix_exists}" ]]; then
      echo "Adding prefix '${prefix}' to the commit title..."
      mutated_commit_title="[${prefix}] ${mutated_commit_title}"
    else
      echo "Prefix '${prefix}' already exists, skipping..."
    fi
  fi

  if [[ -n "${suffix_pattern}" ]]; then
    suffix=$(echo "${branch_name}" | grep -Eo "${suffix_pattern}")
    suffix_exists=$(echo "${commit_title}" | grep -o " (${suffix})$")
    # commit_title=${commit_title%(*}  # remove suffix starting with "("

    if [[ -z "${suffix_exists}" ]]; then
      echo "Adding suffix '${suffix}' to the commit title..."
      mutated_commit_title="${mutated_commit_title} (${suffix})"
    else
      echo "Suffix '${suffix}' already exists, skipping..."
    fi
  fi

  if [[ ${#mutated_commit_title} -gt ${max_length} ]]; then
    report_error "Too long commit message, must be maximum ${max_length} characters"
    return 1
  fi

  if [[ "${mutated_commit_title}" != "${commit_title}" ]] ; then
    $(write_commit_title "${commit_file}" "${commit_title}" "${mutated_commit_title}")
    echo "Commit message was changed to '$(read_commit_title ${commit_file})'"
  else
    echo "No changes required"
  fi

  report_done
}

case "$1" in
  -h|--help|-? )
    echo "${HELP}"
    ;;
  * )
    main "$@"
    exit $?
esac
