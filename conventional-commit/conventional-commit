#!/bin/sh
# =============================================================================
# BSD 2-Clause License
#
# Copyright (c) 2019, Veaceslav Medvedev
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#  list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#  this list of conditions and the following disclaimer in the documentation
#  and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
# OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# =============================================================================

FCR='\033[1;31m' # Red
FCG='\033[1;32m' # Green
FCY='\033[0;33m' # Yellow
FCS='\033[0;37m' # Light gray (silver)
NC='\033[0m'

CMD="conventional-commit"
VERSION="1.0.0"
HOME="https://github.com/slavcodev/git-hooks-scripts"
ABOUT="${FCG}Conventional commit title${NC} version ${FCY}$VERSION${NC}"

OPTION_EXCLUDE_BRANCH="excluded-branch"
OPTION_PREFIX_PATTERN="prefix-pattern"
OPTION_SUFFIX_PATTERN="suffix-pattern"
OPTION_MAX_LENGTH="max-length"
OPTION_EXCLUDE_BRANCH_DEFAULT="master"
OPTION_MAX_LENGTH_DEFAULT=75

HELP="$ABOUT

Git 'commit-msg' hook that looks for patterns the branch name
and uses the matches as prefix or suffix of every commit title.

This is useful if you have convention to use issue number in the branch,
and want to add it automatically to the commit title.
For example, you have branch like 'FOO-9999-add-hook', on adding the commit 'Add Hook,
the hook may add suffix 'Add Hook (FOO-9999)' or prefix '[FOO-9999] Add Hook'.

Note: you can use 'commit --no-verify' to skip 'commit-msg' hooks.

${FCY}Example of config:${NC}
${FCS}~~~
[${CMD}]
  ${OPTION_EXCLUDE_BRANCH} = master
  ${OPTION_EXCLUDE_BRANCH} = development
  ${OPTION_PREFIX_PATTERN} = "FOO-[0-9]+"
  ${OPTION_SUFFIX_PATTERN} = "FOO-[0-9]+"
  ${OPTION_MAX_LENGTH} = ${OPTION_MAX_LENGTH_DEFAULT}
~~~${NC}

$HOME

> Enjoy coding ❤️"

report_start() {
  echo "${FCG}$@${NC}"
}

report_error() {
  echo "${FCR}$@${NC}"
}

report_done() {
  [[ $# > 0 ]] && echo "${FCG}✓ $@${NC}" || echo "${FCG}✓ Done${NC}"
}

report_test_success() {
  echo " ✓ $@"
}

report_test_failure() {
  echo " × ${FCR}$@${NC}"
}

read_config() {
  option="$1"
  default="$2"

  value="$(git config --get ${CMD}.${option})"

  if [[ -z ${value} ]] ; then
    echo ${default}
  else
    echo ${value}
  fi
}

read_all_configs() {
  option="$1"
  default="$2"

  value="$(git config --get-all ${CMD}.${option})"

  if [[ -z ${value} ]] ; then
    echo ${default}
  else
    echo ${value}
  fi
}

filter_branch() {
  branch_name=$1
  shift

  while [[ -n $1 ]]; do
      excluded_branch=$1
      shift
      if [[ "${branch_name}" =~ "${excluded_branch}" ]]; then
        return
      fi
  done

  echo "${branch_name}"
}

extract_addon_text() {
  branch_name="$1"
  pattern="$2"

  if [[ -n "${pattern}" ]]; then
    echo "${branch_name}" | grep -Eo "${pattern}"
  else
    echo ""
  fi
}

add_prefix() {
  commit_title="$1"
  branch_name="$2"
  pattern="$3"
  prefix=$(extract_addon_text "${branch_name}" "${pattern}")

  if [[ -n "${prefix}" ]]; then
    prefix_exists=$(echo "${commit_title}" | grep -o "^\[${prefix}\] ")
    if [[ -z "${prefix_exists}" ]]; then
      commit_title="[${prefix}] ${commit_title}"
    fi
  fi

  echo "${commit_title}"
}

add_suffix() {
  commit_title="$1"
  branch_name="$2"
  pattern="$3"
  suffix=$(extract_addon_text "${branch_name}" "${pattern}")

  if [[ -n "${suffix}" ]]; then
    suffix_exists=$(echo "${commit_title}" | grep -o " (${suffix})$")
    if [[ -z "${suffix_exists}" ]]; then
      commit_title="${commit_title} (${suffix})"
    fi
  fi

  echo "${commit_title}"
}

main() {
  report_start "Preparing conventional prefix or suffix for the commit..."

  commit_file="${1}"
  if [[ -f "${commit_file}" ]] ; then
    is_file="Yes"
  else
    is_file="No"
  fi

  if [[ "${is_file}" == "Yes" ]] ; then
    commit_title="$(head -n 1 "${commit_file}")"
  else
    commit_title="${commit_file}"
  fi

  if [[ -z "${commit_title}" ]]; then
    return
  fi

  excluded_branches="$(read_all_configs ${OPTION_EXCLUDE_BRANCH} ${OPTION_EXCLUDE_BRANCH_DEFAULT})"
  branch_name=$(filter_branch $(git rev-parse --abbrev-ref HEAD) ${excluded_branches})
  if [[ -z "${branch_name}" ]]; then
    return
  fi

  mutated_commit_title="${commit_title}"

  prefix_pattern="$(read_config ${OPTION_PREFIX_PATTERN})"
  mutated_commit_title="$(add_prefix "${mutated_commit_title}" "branch""${branch_name}" "${prefix_pattern}")"

  suffix_pattern="$(read_config ${OPTION_SUFFIX_PATTERN})"
  mutated_commit_title="$(add_suffix "${mutated_commit_title}" "branch""${branch_name}" "${suffix_pattern}")"

  max_length="$(read_config ${OPTION_MAX_LENGTH} ${OPTION_MAX_LENGTH_DEFAULT})"
  if [[ ${#mutated_commit_title} -gt ${max_length} ]]; then
    report_error "Too long commit message, must be maximum ${max_length} characters"
    return 1
  fi

  if [[ "${mutated_commit_title}" != "${commit_title}" ]] ; then
    if [[ "${is_file}" == "Yes" ]] ; then
      sed -i -e 's/'"${commit_title}"'/'"${mutated_commit_title}"'/g' "${commit_file}"
      echo "Commit message was changed to '$(head -n 1 "${commit_file}")'"
    else
      echo "Commit message was changed to '${mutated_commit_title}'"
    fi
  else
    echo "No changes required"
  fi

  report_done
}

assert() {
  rule=$1
  actual=$2
  expected=$3

  if [[ "${actual}" == "${expected}" ]]; then
    report_test_success "${rule}"
  else
    report_test_failure "${rule}" "(expected: ${expected}, got: ${actual})"
  fi
}

test() {
  report_start "Testing conventional prefix or prefix for the commit..."

  assert "Assert branch allowance" "$(filter_branch "foo" "bar" "baz")" "foo"
  assert "Skip excluded branches" "$(filter_branch "foo" "bar" "foo")" ""

  assert "Skip pattern if not found in the branch name" "$(extract_addon_text "master" "FOO-\d+")" ""
  assert "Find placeholder value in the branch name" "$(extract_addon_text "FOO-123-feature" "FOO-\d+")" "FOO-123"
  assert "Find placeholder value in any part of branch name" "$(extract_addon_text "featureFOO-123" "FOO-\d+")" "FOO-123"

  assert "Skip prefix rule if pattern not set in config" "$(add_prefix "Commit" "branch" "")" "Commit"
  assert "Skip prefix rule if pattern not found in branch" "$(add_prefix "Commit" "branch" "FOO")" "Commit"
  assert "Execute prefix rule if pattern found in branch" "$(add_prefix "Commit" "branch-FOO" "FOO")" "[FOO] Commit"
  assert "Skip prefix rule if pattern already exists in commit message" "$(add_prefix "[FOO] Commit" "branch" "FOO")" "[FOO] Commit"

  assert "Skip suffix rule if pattern not set in config" "$(add_suffix "Commit" "branch" "")" "Commit"
  assert "Skip suffix rule if pattern not found in branch" "$(add_suffix "Commit" "branch" "FOO")" "Commit"
  assert "Execute suffix rule if pattern found in branch" "$(add_suffix "Commit" "branch-FOO" "FOO")" "Commit (FOO)"
  assert "Skip suffix rule if pattern already exists in commit message" "$(add_suffix "Commit (FOO)" "branch-FOO" "FOO")" "Commit (FOO)"

  report_done
}

case "$1" in
  -h|--help|-? )
    echo "${HELP}"
    ;;
  --test )
    test "$@"
    exit $?
    ;;
  * )
    main "$@"
    exit $?
esac
