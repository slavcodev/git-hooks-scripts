#!/bin/sh
# =============================================================================
# BSD 2-Clause License
#
# Copyright (c) 2019, Veaceslav Medvedev
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice, this
#  list of conditions and the following disclaimer.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#  this list of conditions and the following disclaimer in the documentation
#  and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
# OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# =============================================================================

FCR='\033[1;31m' # Red
FCG='\033[1;32m' # Green
FCY='\033[0;33m' # Yellow
FCS='\033[0;37m' # Light gray (silver)
NC='\033[0m'

CMD="files-watcher"
VERSION="1.0.0"
HOME="https://github.com/slavcodev/git-hooks-scripts"
ABOUT="${FCG}Files watcher${NC} version ${FCY}$VERSION${NC}"
HELP="$ABOUT

This 'post-merge' hook watches the changed files after merge
and can execute external command if files matched pattern were changed.

${FCY}Example of config:${NC}
${FCS}~~~
[${CMD}]
  watch-branches = master
  mode = \"auto\"

[${CMD} \"composer\.(json|lock)$\"]
  command = \"composer install -n\"

[${CMD} \".php$\"]
  command = \"php-cs-fixer --dry-run\"
  mode = \"prompt\"

[${CMD} \".php$\"]
  command = \"phpunit\"
  mode = \"confirm\"
~~~${NC}

$HOME

> Enjoy coding ❤️"

prompt() {
    echo "$@ [y/N] \c"; read answer
    case "${answer}" in
        y*|Y*) return 0 ;;
        *) return 1 ;;
    esac
}

confirm() {
    echo "$@ [Y/n] \c"; read answer
    case "${answer}" in
        n*|N*) return 1 ;;
        *) return 0 ;;
    esac
}

report_start() {
  echo "${FCG}$@${NC}"
}

report_done() {
  [[ $# > 0 ]] && echo "${FCG}✓ $@${NC}" || echo "${FCG}✓ Done${NC}"
}

main() {
  watch_branches=$(git config --default master --get files-watcher.watch-branches)
  default_mode=$(git config --default prompt --get files-watcher.mode)

  branch_name=$(git rev-parse --abbrev-ref HEAD)

  if [[ ! "${branch_name}" =~ "${watch_branches}" ]]; then
      exit
  fi

  watch_tasks_config_pattern=files-watcher\..\*\.command
  watch_tasks=$(git config --name-only --get-regexp ${watch_tasks_config_pattern})

  if [[ -z ${watch_tasks} ]]; then
      exit
  fi

  # Read user input, assign stdin to keyboard
  exec < /dev/tty

  report_start "Looking for triggers..."

  for task in ${watch_tasks}; do
      if [[ ! "$task" =~ ${watch_tasks_config_pattern} ]]; then
          continue
      fi

      pattern=${task#*.}      # remove prefix ending in "."
      pattern=${pattern%.*}   # remove suffix starting with "."
      echo "Checking '${pattern}' files..."

      changed_files=$(git diff HEAD@\{1\} --name-only --diff-filter=ACMRTUXB | grep -iE ${pattern})

      command=$(git config --type path --get ${task})
      mode=$(git config --default ${default_mode} --get ${task%.*}.mode)

      if [[ -n ${changed_files} ]]; then
          echo "Found changed files:"

          for file in ${changed_files} ; do
              echo "- ${FCS}${file}${NC}"
          done

          case "${mode}" in
              "auto" )
                  command ${command}
                  ;;
              "prompt" )
                  if prompt "Do you like to run '${command}'?"; then
                      command ${command}
                  fi
                  ;;
              "confirm" )
                  if confirm "Do you like to run '${command}'?"; then
                      command ${command}
                  fi
                  ;;
              * )
                  echo "${FCR}Invalid mode option${NC}"
          esac
      fi
  done

  report_done

  exec <&-
}

case "$1" in
  -h|--help|-? )
    echo "${HELP}"
    ;;
  * )
    main
esac
